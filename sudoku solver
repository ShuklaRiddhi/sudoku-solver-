Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:

Each of the digits 1-9 must occur exactly once in each row.
Each of the digits 1-9 must occur exactly once in each column.
Each of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.
solution 


public class SudokuSolver {

    public boolean solveSudoku(int[][] board) {
        int N = board.length;
        int[] row = new int[N];
        int[] col = new int[N];
        int[][] box = new int[3][3];

        // Initialize row, col, and box arrays
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (board[i][j] != 0) {
                    int num = board[i][j] - 1;
                    row[i] |= (1 << num);
                    col[j] |= (1 << num);
                    box[i / 3][j / 3] |= (1 << num);
                }
            }
        }

        return solve(board, row, col, box, 0, 0);
    }

    private boolean solve(int[][] board, int[] row, int[] col, int[][] box, int i, int j) {
        int N = board.length;
        if (i == N)
            return true; // All rows done, puzzle solved

        if (j == N)
            return solve(board, row, col, box, i + 1, 0); // Move to next row

        if (board[i][j] != 0)
            return solve(board, row, col, box, i, j + 1); // Cell already filled

        for (int num = 1; num <= 9; num++) {
            int mask = (1 << (num - 1));
            if ((row[i] & mask) == 0 && (col[j] & mask) == 0 && (box[i / 3][j / 3] & mask) == 0) {
                // Try placing num in current cell
                board[i][j] = num;
                row[i] |= mask;
                col[j] |= mask;
                box[i / 3][j / 3] |= mask;

                if (solve(board, row, col, box, i, j + 1))
                    return true; // Move to next cell

                // Backtrack if placement is incorrect
                board[i][j] = 0;
                row[i] &= ~mask;
                col[j] &= ~mask;
                box[i / 3][j / 3] &= ~mask;
            }
        }

        return false; // No solution found
    }

    public static void main(String[] args) {
        int[][] board = {
                {5, 3, 0, 0, 7, 0, 0, 0, 0},
                {6, 0, 0, 1, 9, 5, 0, 0, 0},
                {0, 9, 8, 0, 0, 0, 0, 6, 0},
                {8, 0, 0, 0, 6, 0, 0, 0, 3},
                {4, 0, 0, 8, 0, 3, 0, 0, 1},
                {7, 0, 0, 0, 2, 0, 0, 0, 6},
                {0, 6, 0, 0, 0, 0, 2, 8, 0},
                {0, 0, 0, 4, 1, 9, 0, 0, 5},
                {0, 0, 0, 0, 8, 0, 0, 7, 9}
        };

        SudokuSolver solver = new SudokuSolver();
        if (solver.solveSudoku(board)) {
            System.out.println("Sudoku puzzle solved:");
            printBoard(board);
        } else {
            System.out.println("No solution exists for the given Sudoku puzzle.");
        }
    }

    private static void printBoard(int[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                System.out.print(board[i][j] + " ");
            }
            System.out.println();
        }
    }
}
